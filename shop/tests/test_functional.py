from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.options import Options as EdgeOptions
from django.contrib.auth import get_user_model
from model_bakery import baker




# Testing complaint accept with 10 compensation and refund
class Test2(StaticLiveServerTestCase):
  def setUp(self):
    super().setUp()

    # Limiting string length generated by baker
    baker.generators.add('django.db.models.CharField', lambda: "Short text")
    baker.generators.add('django.db.models.TextField', lambda: "Short text")

    User = get_user_model()

    # DB setup
    # Create test user with hashed password
    self.user = User.objects.create_user(
      username='worker1',
      password='password'
    )

    # Create client and related objects
    self.client_user = baker.make(User, username='client1')
    self.client_profile = baker.make('shop.Client', user=self.client_user)

    # Create full delivery chain
    self.address = baker.make('shop.Address')
    self.delivery_stage = baker.make('shop.DeliveryStage')
    self.delivery_leave_place = baker.make('shop.DeliveryLeavePlace')

    # Create order with delivery
    self.order = baker.make('shop.Order', client=self.client_profile, total_price=100)
    self.delivery = baker.make(
      'shop.Delivery',
      order=self.order,
      address=self.address,
      delivery_stage=self.delivery_stage,
      delivery_leave_place=self.delivery_leave_place
    )

    # Create complaint with full relationships
    self.complaint = baker.make(
      'shop.Complaint',
      title='Twix lost',
      client=self.client_profile,
      order=self.order
    )

    # Create worker profile
    self.worker_role = baker.make('shop.WorkerRole', name='Support')
    self.worker = baker.make(
      'shop.Worker',
      role=self.worker_role,
      user=self.user
    )


    # Driver setup
    edge_options = EdgeOptions()
    edge_options.add_argument('--force-device-scale-factor=0.8')  # 80% zoom

    # Initialize driver with options
    self.driver = webdriver.Edge(options=edge_options)
    self.driver.set_window_size(945, 1080)
    self.driver.get(self.live_server_url)
  
  def tearDown(self):
    super().tearDown()
    self.driver.quit()
    print("Browser closed and resources cleaned up")

  
  def test_complaint_accept_with_compensation_of_10_and_refund(self):
    self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-primary").click()
    self.driver.find_element(By.ID, "id_username").click()
    self.driver.find_element(By.ID, "id_username").send_keys("worker1")
    self.driver.find_element(By.ID, "id_password").click()
    self.driver.find_element(By.ID, "id_password").send_keys("password")
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    self.driver.find_element(By.LINK_TEXT, "Complaint #1 - Twix lost").click()
    self.driver.find_element(By.ID, "compensation").click()
    self.driver.find_element(By.ID, "compensation").send_keys("10")
    self.driver.find_element(By.ID, "refundCheckbox").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()
    self.driver.find_element(By.LINK_TEXT, "Go back").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-outline-danger").click()
